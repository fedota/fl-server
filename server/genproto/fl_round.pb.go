// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fl_round.proto

package fl_round

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of Fl Data
type Type int32

const (
	Type_FL_CHECKPOINT        Type = 0
	Type_FL_CHECKPOINT_UPDATE Type = 1
	Type_FL_RECONN_TIME       Type = 2
)

var Type_name = map[int32]string{
	0: "FL_CHECKPOINT",
	1: "FL_CHECKPOINT_UPDATE",
	2: "FL_RECONN_TIME",
}

var Type_value = map[string]int32{
	"FL_CHECKPOINT":        0,
	"FL_CHECKPOINT_UPDATE": 1,
	"FL_RECONN_TIME":       2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff7f26049208dd67, []int{0}
}

// Client CheckIn Ping
// Currently, only a string message
type CheckInRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckInRequest) Reset()         { *m = CheckInRequest{} }
func (m *CheckInRequest) String() string { return proto.CompactTextString(m) }
func (*CheckInRequest) ProtoMessage()    {}
func (*CheckInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff7f26049208dd67, []int{0}
}

func (m *CheckInRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckInRequest.Unmarshal(m, b)
}
func (m *CheckInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckInRequest.Marshal(b, m, deterministic)
}
func (m *CheckInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckInRequest.Merge(m, src)
}
func (m *CheckInRequest) XXX_Size() int {
	return xxx_messageInfo_CheckInRequest.Size(m)
}
func (m *CheckInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckInRequest proto.InternalMessageInfo

func (m *CheckInRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Chunk of bytes
type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff7f26049208dd67, []int{1}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// FL Data: For communication between client and server
type FlData struct {
	Message              *Chunk   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Type                 Type     `protobuf:"varint,3,opt,name=type,proto3,enum=Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlData) Reset()         { *m = FlData{} }
func (m *FlData) String() string { return proto.CompactTextString(m) }
func (*FlData) ProtoMessage()    {}
func (*FlData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff7f26049208dd67, []int{2}
}

func (m *FlData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlData.Unmarshal(m, b)
}
func (m *FlData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlData.Marshal(b, m, deterministic)
}
func (m *FlData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlData.Merge(m, src)
}
func (m *FlData) XXX_Size() int {
	return xxx_messageInfo_FlData.Size(m)
}
func (m *FlData) XXX_DiscardUnknown() {
	xxx_messageInfo_FlData.DiscardUnknown(m)
}

var xxx_messageInfo_FlData proto.InternalMessageInfo

func (m *FlData) GetMessage() *Chunk {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *FlData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FlData) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_FL_CHECKPOINT
}

func init() {
	proto.RegisterEnum("Type", Type_name, Type_value)
	proto.RegisterType((*CheckInRequest)(nil), "CheckInRequest")
	proto.RegisterType((*Chunk)(nil), "Chunk")
	proto.RegisterType((*FlData)(nil), "FlData")
}

func init() { proto.RegisterFile("fl_round.proto", fileDescriptor_ff7f26049208dd67) }

var fileDescriptor_ff7f26049208dd67 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4f, 0x83, 0x40,
	0x14, 0x84, 0xbb, 0x2d, 0x85, 0xf8, 0x54, 0xc4, 0x17, 0x0f, 0xe8, 0xc1, 0x20, 0x27, 0xec, 0x81,
	0x18, 0xfc, 0x05, 0x86, 0x82, 0x12, 0x2b, 0x6d, 0x36, 0xf4, 0xe0, 0x89, 0x60, 0xfb, 0xb4, 0xa6,
	0x14, 0xb0, 0x2c, 0x87, 0xfe, 0x7b, 0xc3, 0x2a, 0x4d, 0xb8, 0xed, 0xcc, 0xce, 0x9b, 0x64, 0x3e,
	0xd0, 0x3f, 0xf3, 0x74, 0x5f, 0x36, 0xc5, 0xda, 0xad, 0xf6, 0xa5, 0x28, 0xed, 0x09, 0xe8, 0xfe,
	0x86, 0x56, 0xdb, 0xa8, 0xe0, 0xf4, 0xd3, 0x50, 0x2d, 0xd0, 0x04, 0x6d, 0x47, 0x75, 0x9d, 0x7d,
	0x91, 0xc9, 0x2c, 0xe6, 0x9c, 0xf0, 0x4e, 0xda, 0x77, 0x30, 0xf6, 0x37, 0x4d, 0xb1, 0x6d, 0x23,
	0xab, 0xb2, 0x10, 0x54, 0x08, 0x19, 0x39, 0xe3, 0x9d, 0xb4, 0xdf, 0x41, 0x0d, 0xf3, 0x69, 0x26,
	0x32, 0xb4, 0xfa, 0x35, 0xa7, 0x9e, 0xea, 0xca, 0xe3, 0x63, 0x1d, 0x22, 0x28, 0xe2, 0x7b, 0x47,
	0xe6, 0xd0, 0x62, 0xce, 0x88, 0xcb, 0x37, 0x5e, 0x83, 0x22, 0x0e, 0x15, 0x99, 0x23, 0x8b, 0x39,
	0xba, 0x37, 0x76, 0x93, 0x43, 0x45, 0x5c, 0x5a, 0x93, 0x67, 0x50, 0x5a, 0x85, 0x97, 0x70, 0x1e,
	0xce, 0x52, 0xff, 0x25, 0xf0, 0x5f, 0x17, 0xf3, 0x28, 0x4e, 0x8c, 0x01, 0x9a, 0x70, 0xd5, 0xb3,
	0xd2, 0xe5, 0x62, 0xfa, 0x94, 0x04, 0x06, 0x43, 0x04, 0x3d, 0x9c, 0xa5, 0x3c, 0xf0, 0xe7, 0x71,
	0x9c, 0x26, 0xd1, 0x5b, 0x60, 0x0c, 0xbd, 0x04, 0xb4, 0x30, 0xe7, 0x2d, 0x03, 0xbc, 0x07, 0xed,
	0x7f, 0x3d, 0x5e, 0xb8, 0x7d, 0x0e, 0x37, 0x9a, 0xfb, 0xb7, 0xc4, 0x1e, 0x38, 0xec, 0x81, 0xe1,
	0x2d, 0xa8, 0xcb, 0x6a, 0x9d, 0x09, 0xc2, 0xee, 0xa3, 0x97, 0xf8, 0x50, 0x25, 0xcf, 0xc7, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xb6, 0x1e, 0x06, 0x61, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlRoundClient is the client API for FlRound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlRoundClient interface {
	CheckIn(ctx context.Context, opts ...grpc.CallOption) (FlRound_CheckInClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (FlRound_UpdateClient, error)
}

type flRoundClient struct {
	cc *grpc.ClientConn
}

func NewFlRoundClient(cc *grpc.ClientConn) FlRoundClient {
	return &flRoundClient{cc}
}

func (c *flRoundClient) CheckIn(ctx context.Context, opts ...grpc.CallOption) (FlRound_CheckInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlRound_serviceDesc.Streams[0], "/FlRound/CheckIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &flRoundCheckInClient{stream}
	return x, nil
}

type FlRound_CheckInClient interface {
	Send(*CheckInRequest) error
	Recv() (*FlData, error)
	grpc.ClientStream
}

type flRoundCheckInClient struct {
	grpc.ClientStream
}

func (x *flRoundCheckInClient) Send(m *CheckInRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flRoundCheckInClient) Recv() (*FlData, error) {
	m := new(FlData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flRoundClient) Update(ctx context.Context, opts ...grpc.CallOption) (FlRound_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlRound_serviceDesc.Streams[1], "/FlRound/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &flRoundUpdateClient{stream}
	return x, nil
}

type FlRound_UpdateClient interface {
	Send(*FlData) error
	CloseAndRecv() (*FlData, error)
	grpc.ClientStream
}

type flRoundUpdateClient struct {
	grpc.ClientStream
}

func (x *flRoundUpdateClient) Send(m *FlData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flRoundUpdateClient) CloseAndRecv() (*FlData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FlData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlRoundServer is the server API for FlRound service.
type FlRoundServer interface {
	CheckIn(FlRound_CheckInServer) error
	Update(FlRound_UpdateServer) error
}

// UnimplementedFlRoundServer can be embedded to have forward compatible implementations.
type UnimplementedFlRoundServer struct {
}

func (*UnimplementedFlRoundServer) CheckIn(srv FlRound_CheckInServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (*UnimplementedFlRoundServer) Update(srv FlRound_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterFlRoundServer(s *grpc.Server, srv FlRoundServer) {
	s.RegisterService(&_FlRound_serviceDesc, srv)
}

func _FlRound_CheckIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlRoundServer).CheckIn(&flRoundCheckInServer{stream})
}

type FlRound_CheckInServer interface {
	Send(*FlData) error
	Recv() (*CheckInRequest, error)
	grpc.ServerStream
}

type flRoundCheckInServer struct {
	grpc.ServerStream
}

func (x *flRoundCheckInServer) Send(m *FlData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flRoundCheckInServer) Recv() (*CheckInRequest, error) {
	m := new(CheckInRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FlRound_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlRoundServer).Update(&flRoundUpdateServer{stream})
}

type FlRound_UpdateServer interface {
	SendAndClose(*FlData) error
	Recv() (*FlData, error)
	grpc.ServerStream
}

type flRoundUpdateServer struct {
	grpc.ServerStream
}

func (x *flRoundUpdateServer) SendAndClose(m *FlData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flRoundUpdateServer) Recv() (*FlData, error) {
	m := new(FlData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FlRound_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FlRound",
	HandlerType: (*FlRoundServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckIn",
			Handler:       _FlRound_CheckIn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _FlRound_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fl_round.proto",
}
